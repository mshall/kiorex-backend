
> @healthcare/auth-service@1.0.0 start:dev
> nest start --watch

[2J[3J[H[[90m3:07:16 AM[0m] Starting compilation in watch mode...

[[90m3:07:28 AM[0m] Found 0 errors. Watching for file changes.

(node:53900) [DEP0190] DeprecationWarning: Passing args to a child process with shell option true can lead to security vulnerabilities, as the arguments are not escaped, only concatenated.
(Use `node --trace-deprecation ...` to show where the warning was created)
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [NestFactory] Starting Nest application...
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] AppModule dependencies initialized +170ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] TypeOrmModule dependencies initialized +1ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] PassportModule dependencies initialized +0ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] ConfigHostModule dependencies initialized +0ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] ConfigModule dependencies initialized +1ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] ConfigModule dependencies initialized +0ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] ThrottlerModule dependencies initialized +156ms
[Nest] 54575  - 10/02/2025, 3:07:34 AM     LOG [InstanceLoader] JwtModule dependencies initialized +24ms
query: SELECT version()
query: SELECT * FROM current_schema()
query: CREATE EXTENSION IF NOT EXISTS "uuid-ossp"
query: START TRANSACTION
query: SELECT * FROM current_schema()
query: SELECT * FROM current_database()
query: SELECT "table_schema", "table_name", obj_description(('"' || "table_schema" || '"."' || "table_name" || '"')::regclass, 'pg_class') AS table_comment FROM "information_schema"."tables" WHERE ("table_schema" = 'public' AND "table_name" = 'refresh_tokens') OR ("table_schema" = 'public' AND "table_name" = 'mfa_secrets') OR ("table_schema" = 'public' AND "table_name" = 'login_history') OR ("table_schema" = 'public' AND "table_name" = 'user_auth')
query: SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'
query: SELECT columns.*, pg_catalog.col_description(('"' || table_catalog || '"."' || table_schema || '"."' || table_name || '"')::regclass::oid, ordinal_position) AS description, ('"' || "udt_schema" || '"."' || "udt_name" || '"')::"regtype"::text AS "regtype", pg_catalog.format_type("col_attr"."atttypid", "col_attr"."atttypmod") AS "format_type" FROM "information_schema"."columns" LEFT JOIN "pg_catalog"."pg_attribute" AS "col_attr" ON "col_attr"."attname" = "columns"."column_name" AND "col_attr"."attrelid" = ( SELECT "cls"."oid" FROM "pg_catalog"."pg_class" AS "cls" LEFT JOIN "pg_catalog"."pg_namespace" AS "ns" ON "ns"."oid" = "cls"."relnamespace" WHERE "cls"."relname" = "columns"."table_name" AND "ns"."nspname" = "columns"."table_schema" ) WHERE ("table_schema" = 'public' AND "table_name" = 'refresh_tokens') OR ("table_schema" = 'public' AND "table_name" = 'mfa_secrets') OR ("table_schema" = 'public' AND "table_name" = 'login_history') OR ("table_schema" = 'public' AND "table_name" = 'user_auth')
query: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "cnst"."conname" AS "constraint_name", pg_get_constraintdef("cnst"."oid") AS "expression", CASE "cnst"."contype" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS "constraint_type", "a"."attname" AS "column_name" FROM "pg_constraint" "cnst" INNER JOIN "pg_class" "t" ON "t"."oid" = "cnst"."conrelid" INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "cnst"."connamespace" LEFT JOIN "pg_attribute" "a" ON "a"."attrelid" = "cnst"."conrelid" AND "a"."attnum" = ANY ("cnst"."conkey") WHERE "t"."relkind" IN ('r', 'p') AND (("ns"."nspname" = 'public' AND "t"."relname" = 'refresh_tokens') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'mfa_secrets') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'login_history') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'user_auth'))
query: SELECT "ns"."nspname" AS "table_schema", "t"."relname" AS "table_name", "i"."relname" AS "constraint_name", "a"."attname" AS "column_name", CASE "ix"."indisunique" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS "is_unique", pg_get_expr("ix"."indpred", "ix"."indrelid") AS "condition", "types"."typname" AS "type_name", "am"."amname" AS "index_type" FROM "pg_class" "t" INNER JOIN "pg_index" "ix" ON "ix"."indrelid" = "t"."oid" INNER JOIN "pg_attribute" "a" ON "a"."attrelid" = "t"."oid"  AND "a"."attnum" = ANY ("ix"."indkey") INNER JOIN "pg_namespace" "ns" ON "ns"."oid" = "t"."relnamespace" INNER JOIN "pg_class" "i" ON "i"."oid" = "ix"."indexrelid" INNER JOIN "pg_type" "types" ON "types"."oid" = "a"."atttypid" INNER JOIN "pg_am" "am" ON "i"."relam" = "am"."oid" LEFT JOIN "pg_constraint" "cnst" ON "cnst"."conname" = "i"."relname" WHERE "t"."relkind" IN ('r', 'p') AND "cnst"."contype" IS NULL AND (("ns"."nspname" = 'public' AND "t"."relname" = 'refresh_tokens') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'mfa_secrets') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'login_history') OR ("ns"."nspname" = 'public' AND "t"."relname" = 'user_auth'))
query: SELECT "con"."conname" AS "constraint_name", "con"."nspname" AS "table_schema", "con"."relname" AS "table_name", "att2"."attname" AS "column_name", "ns"."nspname" AS "referenced_table_schema", "cl"."relname" AS "referenced_table_name", "att"."attname" AS "referenced_column_name", "con"."confdeltype" AS "on_delete", "con"."confupdtype" AS "on_update", "con"."condeferrable" AS "deferrable", "con"."condeferred" AS "deferred" FROM ( SELECT UNNEST ("con1"."conkey") AS "parent", UNNEST ("con1"."confkey") AS "child", "con1"."confrelid", "con1"."conrelid", "con1"."conname", "con1"."contype", "ns"."nspname", "cl"."relname", "con1"."condeferrable", CASE WHEN "con1"."condeferred" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, CASE "con1"."confdeltype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confdeltype", CASE "con1"."confupdtype" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as "confupdtype" FROM "pg_class" "cl" INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_constraint" "con1" ON "con1"."conrelid" = "cl"."oid" WHERE "con1"."contype" = 'f' AND (("ns"."nspname" = 'public' AND "cl"."relname" = 'refresh_tokens') OR ("ns"."nspname" = 'public' AND "cl"."relname" = 'mfa_secrets') OR ("ns"."nspname" = 'public' AND "cl"."relname" = 'login_history') OR ("ns"."nspname" = 'public' AND "cl"."relname" = 'user_auth')) ) "con" INNER JOIN "pg_attribute" "att" ON "att"."attrelid" = "con"."confrelid" AND "att"."attnum" = "con"."child" INNER JOIN "pg_class" "cl" ON "cl"."oid" = "con"."confrelid"  AND "cl"."relispartition" = 'f'INNER JOIN "pg_namespace" "ns" ON "cl"."relnamespace" = "ns"."oid" INNER JOIN "pg_attribute" "att2" ON "att2"."attrelid" = "con"."conrelid" AND "att2"."attnum" = "con"."parent"
query: SELECT "udt_schema", "udt_name" FROM "information_schema"."columns" WHERE "table_schema" = 'public' AND "table_name" = 'mfa_secrets' AND "column_name"='type'
query: SELECT "udt_schema", "udt_name" FROM "information_schema"."columns" WHERE "table_schema" = 'public' AND "table_name" = 'login_history' AND "column_name"='status'
query: SELECT "udt_schema", "udt_name" FROM "information_schema"."columns" WHERE "table_schema" = 'public' AND "table_name" = 'user_auth' AND "column_name"='role'
query: SELECT "udt_schema", "udt_name" FROM "information_schema"."columns" WHERE "table_schema" = 'public' AND "table_name" = 'user_auth' AND "column_name"='provider'
query: SELECT "e"."enumlabel" AS "value" FROM "pg_enum" "e" INNER JOIN "pg_type" "t" ON "t"."oid" = "e"."enumtypid" INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" WHERE "n"."nspname" = 'public' AND "t"."typname" = 'mfa_secrets_type_enum'
query: SELECT "e"."enumlabel" AS "value" FROM "pg_enum" "e" INNER JOIN "pg_type" "t" ON "t"."oid" = "e"."enumtypid" INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" WHERE "n"."nspname" = 'public' AND "t"."typname" = 'login_history_status_enum'
query: SELECT "e"."enumlabel" AS "value" FROM "pg_enum" "e" INNER JOIN "pg_type" "t" ON "t"."oid" = "e"."enumtypid" INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" WHERE "n"."nspname" = 'public' AND "t"."typname" = 'user_auth_role_enum'
query: SELECT "e"."enumlabel" AS "value" FROM "pg_enum" "e" INNER JOIN "pg_type" "t" ON "t"."oid" = "e"."enumtypid" INNER JOIN "pg_namespace" "n" ON "n"."oid" = "t"."typnamespace" WHERE "n"."nspname" = 'public' AND "t"."typname" = 'user_auth_provider_enum'
query: SELECT * FROM "information_schema"."tables" WHERE "table_schema" = 'public' AND "table_name" = 'typeorm_metadata'
query: COMMIT
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [InstanceLoader] TypeOrmCoreModule dependencies initialized +559ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [InstanceLoader] TypeOrmModule dependencies initialized +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [InstanceLoader] AuthModule dependencies initialized +1ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RoutesResolver] AuthController {/auth}: +9ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/register, POST} route +4ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/login, POST} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/mfa/verify, POST} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/mfa/setup, POST} route +1ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/refresh, POST} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/logout, POST} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/forgot-password, POST} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/reset-password, POST} route +1ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/profile, GET} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/profile, PUT} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/sessions, GET} route +1ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [RouterExplorer] Mapped {/auth/sessions/:sessionId, DELETE} route +0ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM     LOG [NestApplication] Nest application successfully started +3ms
[Nest] 54575  - 10/02/2025, 3:07:35 AM   ERROR [NestApplication] Error: listen EADDRINUSE: address already in use :::3001 +2ms
node:net:1940
    const ex = new UVExceptionWithHostPort(err, 'listen', address, port);
               ^

Error: listen EADDRINUSE: address already in use :::3001
    at Server.setupListenHandle [as _listen2] (node:net:1940:16)
    at listenInCluster (node:net:1997:12)
    at Server.listen (node:net:2102:7)
    at ExpressAdapter.listen (/Users/mohamedelshall/Library/Mobile Documents/com~apple~CloudDocs/Documents/Me/Personal/Work/Kiorex/SourceCode/Backend/kiorex-backend/services/auth-service/node_modules/@nestjs/platform-express/adapters/express-adapter.js:95:32)
    at /Users/mohamedelshall/Library/Mobile Documents/com~apple~CloudDocs/Documents/Me/Personal/Work/Kiorex/SourceCode/Backend/kiorex-backend/services/auth-service/node_modules/@nestjs/core/nest-application.js:183:30
    at new Promise (<anonymous>)
    at NestApplication.listen (/Users/mohamedelshall/Library/Mobile Documents/com~apple~CloudDocs/Documents/Me/Personal/Work/Kiorex/SourceCode/Backend/kiorex-backend/services/auth-service/node_modules/@nestjs/core/nest-application.js:173:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async bootstrap (/Users/mohamedelshall/Library/Mobile Documents/com~apple~CloudDocs/Documents/Me/Personal/Work/Kiorex/SourceCode/Backend/kiorex-backend/services/auth-service/src/main.ts:6:3) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '::',
  port: 3001
}

Node.js v24.8.0
