version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthcare-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: auth_db,users_db,appointments_db,payments_db,clinical_db,notifications_db,search_db,video_db,analytics_db,lab_db,pharmacy_db,surgery_db,nurse_db,document_db,admin_db,consultations_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - healthcare-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: healthcare-redis
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - healthcare-network

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: healthcare-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - healthcare-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: healthcare-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - healthcare-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: healthcare-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - healthcare-network

  # MinIO (S3 compatible storage)
  minio:
    image: minio/minio:latest
    container_name: healthcare-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - healthcare-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: healthcare-auth-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: auth_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRATION: 15m
      JWT_REFRESH_SECRET: super-secret-refresh-key-change-in-production
      JWT_REFRESH_EXPIRATION: 7d
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: healthcare-user-service
    environment:
      NODE_ENV: development
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: users_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
      - kafka
      - minio
    networks:
      - healthcare-network

  # Appointment Service
  appointment-service:
    build:
      context: ./services/appointment-service
      dockerfile: Dockerfile
    container_name: healthcare-appointment-service
    environment:
      NODE_ENV: development
      PORT: 3005
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_NAME: appointments_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKER: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 3002
      NOTIFICATION_SERVICE_HOST: notification-service
      NOTIFICATION_SERVICE_PORT: 3006
    ports:
      - "3005:3005"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: healthcare-payment-service
    environment:
      NODE_ENV: development
      PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: payments_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Clinical Service
  clinical-service:
    build:
      context: ./services/clinical-service
      dockerfile: Dockerfile
    container_name: healthcare-clinical-service
    environment:
      NODE_ENV: development
      PORT: 3006
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_NAME: clinical_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKER: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      ENCRYPTION_KEY: super-secret-encryption-key-change-in-production
    ports:
      - "3006:3006"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: healthcare-notification-service
    environment:
      NODE_ENV: development
      PORT: 3007
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: notifications_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
    ports:
      - "3007:3007"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: healthcare-search-service
    environment:
      NODE_ENV: development
      PORT: 3008
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: search_db
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3008:3008"
    depends_on:
      - postgres
      - elasticsearch
      - redis
      - kafka
    networks:
      - healthcare-network

  # Video Service
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    container_name: healthcare-video-service
    environment:
      NODE_ENV: development
      PORT: 3009
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: video_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
    ports:
      - "3009:3009"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: healthcare-analytics-service
    environment:
      NODE_ENV: development
      PORT: 3010
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: analytics_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      ELASTICSEARCH_NODE: http://elasticsearch:9200
    ports:
      - "3010:3010"
    depends_on:
      - postgres
      - redis
      - kafka
      - elasticsearch
    networks:
      - healthcare-network

  # Lab Service
  lab-service:
    build:
      context: ./services/lab-service
      dockerfile: Dockerfile
    container_name: healthcare-lab-service
    environment:
      NODE_ENV: development
      PORT: 3011
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: lab_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3011:3011"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Pharmacy Service
  pharmacy-service:
    build:
      context: ./services/pharmacy-service
      dockerfile: Dockerfile
    container_name: healthcare-pharmacy-service
    environment:
      NODE_ENV: development
      PORT: 3012
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: pharmacy_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3012:3012"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Surgery Service
  surgery-service:
    build:
      context: ./services/surgery-service
      dockerfile: Dockerfile
    container_name: healthcare-surgery-service
    environment:
      NODE_ENV: development
      PORT: 3013
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: surgery_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3013:3013"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Nurse Service
  nurse-service:
    build:
      context: ./services/nurse-service
      dockerfile: Dockerfile
    container_name: healthcare-nurse-service
    environment:
      NODE_ENV: development
      PORT: 3014
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: nurse_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3014:3014"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Document Service
  document-service:
    build:
      context: ./services/document-service
      dockerfile: Dockerfile
    container_name: healthcare-document-service
    environment:
      NODE_ENV: development
      PORT: 3015
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: document_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
      ALLOWED_FILE_TYPES: pdf,doc,docx,jpg,jpeg,png,gif,txt
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    ports:
      - "3015:3015"
    depends_on:
      - postgres
      - redis
      - kafka
      - minio
    networks:
      - healthcare-network

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: healthcare-admin-service
    environment:
      NODE_ENV: development
      PORT: 3016
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: admin_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      ADMIN_EMAIL: admin@kiorex.com
      ADMIN_PASSWORD: admin123
      DEFAULT_ROLE: admin
    ports:
      - "3016:3016"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # Consultations Service
  consultations-service:
    build:
      context: ./services/consultations-service
      dockerfile: Dockerfile
    container_name: healthcare-consultations-service
    environment:
      NODE_ENV: development
      PORT: 3018
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: consultations_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    ports:
      - "3018:3018"
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - healthcare-network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: healthcare-api-gateway
    environment:
      NODE_ENV: development
      PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      USER_SERVICE_URL: http://user-service:3002
      APPOINTMENT_SERVICE_URL: http://appointment-service:3005
      PAYMENT_SERVICE_URL: http://payment-service:3004
      CLINICAL_SERVICE_URL: http://clinical-service:3006
      NOTIFICATION_SERVICE_URL: http://notification-service:3007
      SEARCH_SERVICE_URL: http://search-service:3008
      VIDEO_SERVICE_URL: http://video-service:3009
      ANALYTICS_SERVICE_URL: http://analytics-service:3010
      LAB_SERVICE_URL: http://lab-service:3011
      PHARMACY_SERVICE_URL: http://pharmacy-service:3012
      SURGERY_SERVICE_URL: http://surgery-service:3013
      NURSE_SERVICE_URL: http://nurse-service:3014
      DOCUMENT_SERVICE_URL: http://document-service:3015
      ADMIN_SERVICE_URL: http://admin-service:3016
      CONSULTATIONS_SERVICE_URL: http://consultations-service:3018
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
      VALID_API_KEYS: api-key-123,api-key-456
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - user-service
      - appointment-service
      - payment-service
      - clinical-service
      - notification-service
      - search-service
      - video-service
      - analytics-service
      - lab-service
      - pharmacy-service
      - surgery-service
      - nurse-service
      - document-service
      - admin-service
      - consultations-service
    networks:
      - healthcare-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - healthcare-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: healthcare-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healthcare-network

  # Monitoring - Jaeger (Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: healthcare-jaeger
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - healthcare-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - healthcare-network

  grafana:
    image: grafana/grafana:latest
    container_name: healthcare-grafana
    ports:
      - "3030:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healthcare-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: healthcare-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    networks:
      - healthcare-network

networks:
  healthcare-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data: